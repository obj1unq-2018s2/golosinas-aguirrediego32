import golosinas.*
import mariano.*

describe "tests de mariano" {

	fixture {
		chocolatin.pesoInicial(100)
		mariano.comprar(chocolatin)
		mariano.comprar(caramelo)
		mariano.comprar(bombon)
	}

	test "test comprar" {
		assert.equals(3, mariano.golosinasCompradas().size())
		assert.that(mariano.golosinasCompradas().contains(chocolatin))
		assert.that(mariano.golosinasCompradas().contains(caramelo))
		assert.that(mariano.golosinasCompradas().contains(bombon))
		assert.notThat(mariano.golosinasCompradas().contains(chupetin))
	}
	
	test "probar golosinas" {
		// habilitar las lineas anuladas cuando se complete la definicion 
		 // de las golosinas
		 
		assert.equals(100, chocolatin.peso())
	assert.equals(5, caramelo.peso())
		assert.equals(15, bombon.peso())
		mariano.probarGolosinas()
		assert.equals(98, chocolatin.peso())
		assert.equals(4, caramelo.peso())
		assert.equals(11, bombon.peso())
	}
	test "sin TACC"{
		assert.equals(true, mariano.hayGolosinaSinTACC())
	}
	test "mariano compra tres golosinas y descarta un caramelo"{
		mariano.comprar(chocolatin)
		mariano.comprar(caramelo)
		mariano.comprar(bombon)()
		mariano.desechar(caramelo)
		assert.equals(mariano.golosinasCompradas(), #[bombon,chocolatin])
	}
	test "test golosinas faltantes" {	
	mariano.comprar(oblea)
	mariano.comprar(caramelo)
	mariano.comprar(bombon)
	assert.equals(#{alfajor,tuttifrutti, chupetin}, mariano.golosinasFaltantes([alfajor, bombon,tuttifrutti, oblea, chupetin]))	
}
	test"no todos son precios cuidados"{
		mariano.comprar(oblea)
		mariano.comprar(bombon)
		mariano.comprar(alfajor)
		mariano.comprar(chupetin)
		mariano.comprar(tuttifrutti)
		mariano.comprar(oblea)
		assert.notThat(mariano.preciosCuidados())
	}
}
